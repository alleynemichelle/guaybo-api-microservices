export const ErrorCodes = {
    UNAUTHORIZED_ACCESS: 'UnauthorizedAccess',
    USER_DOES_NOT_HAVE_ACCESS_TO_PRODUCT: 'UserDoesNotHaveAccessToProduct',
};

export enum UsersErrorCodes {
    UserNotFoundException = 'UserNotFoundException',
    AuthException = 'AuthException',
    UsernameExistsException = 'UsernameExistsException',
    PaymentOptionNotFound = 'PaymentOptionNotFound',
    PaymentMethodNotFound = 'PaymentMethodNotFound',
    InvalidPasswordException = 'InvalidPassword',
    CodeMismatchException = 'InvalidConfirmationCode',
    ExpiredCodeException = 'ExpiredCodeException',
    AccountNotFoundException = 'AccountNotFoundException',
    UserNotConfirmedException = 'UserIsNotConfirmed',
    NotAuthorizedException = 'UserIsNotAuthorized',
    AliasExistsException = 'EmailAlreadyExists',
    TooManyFailedAttemptsException = 'TooManyFailedAttemptsException',
    invalid_grant = 'FederatedUserIsNotAuthorized',
    InvalidCodeType = 'InvalidCodeType',
    InvalidCredentials = 'InvalidCredentials',
    UserIsAlreadyConfirmed = 'UserIsAlreadyConfirmed',
    InvitationAlreadyAccepted = 'InvitationAlreadyAccepted',
    InvalidUserType = 'InvalidUserType',
    InvalidReferrerParameters = 'InvalidReferrerParameters',
    NewPasswordRequired = 'NewPasswordRequired',
    InvalidSessionToken = 'InvalidSessionToken',
    StandardLoginIsRequired = 'StandardLoginIsRequired',
    FederatedLoginIsRequired = 'FederatedLoginIsRequired',
    FederatedUserCannotResetPassword = 'FederatedUserCannotResetPassword',
    HostInvalidLogin = 'HostInvalidLogin',
    Unauthorized = 'Unauthorized',
    UserIsNotConfirmed = 'UserIsNotConfirmed',
    UserRegistrationAlreadyCompleted = 'UserRegistrationAlreadyCompleted',
    RegistrationIsNotCompleted = 'RegistrationIsNotCompleted',
}

export enum HostErrorCodes {
    InvalidStatus = 'InvalidStatus',
    InvalidRole = 'InvalidRole',
    HostNotFound = 'HostNotFound',
    NoAttributesToUpdate = 'NoAttributesToUpdate',
    CustomerNotFound = 'CustomerNotFound',
    EventNotFound = 'EventNotFound',
    AliasAlreadyExists = 'AliasAlreadyExists',
    PaymentOptionNotFound = 'PaymentOptionNotFound',
    InvalidCoupon = 'InvalidCoupon',
    ActiveCouponExists = 'ActiveCouponExists',
    FailedToCreateHost = 'FailedToCreateHost',
    KycSessionNotFound = 'KycSessionNotFound',
    IdentityNotFound = 'IdentityNotFound',
    KycSessionLimitReached = 'KycSessionLimitReached',
    KycAlreadyApproved = 'KycAlreadyApproved',
    InvalidPlan = 'InvalidPlan',
}

export enum TemporalTokenErrorCodes {
    TemporalTokenRequired = 'TemporalTokenRequired',
    TemporalTokenInvalid = 'TemporalTokenInvalid',
    TemporalTokenTypeInvalid = 'TemporalTokenTypeInvalid',
    TemporalTokenError = 'TemporalTokenError',
    TemporalTokenExpired = 'TemporalTokenExpired',
    TemporalTokenUsed = 'TemporalTokenUsed',
    TemporalTokenInconsistent = 'TemporalTokenInconsistent',
    TemporalTokenNotFound = 'TemporalTokenNotFound',
}

export enum BookingsErrorCodes {
    BookingNotFound = 'BookingNotFound',
    ServiceNotFound = 'ServiceNotFound',
    HostNotFound = 'HostNotFound',
    UserNotFound = 'UserNotFound',
    PlanNotFound = 'PlanNotFound',
    EventNotFound = 'EventNotFound',
    EventIsClosed = 'EventIsClosed',
    SessionOrEventIsRequired = 'SessionOrEventIsRequired',
    SessionNotFound = 'SessionNotFound',
    InvalidAmount = 'InvalidAmount',
    DiscountCodeNotFound = 'DiscountCodeNotFound',
    StatusIsTheCurrentOne = 'StatusIsTheCurrentOne',
    ExceedsMaxPaymentDeadline = 'ExceedsMaxPaymentDeadline',
    NoDataToUpdate = 'NoDataToUpdate',
    PaymentNotFound = 'PaymentNotFound',
    InstallmentAlreadyPaid = 'InstallmentAlreadyPaid',
    InvalidConversionRate = 'InvalidConversionRate',
    PaymentReceiptRequired = 'PaymentReceiptRequired',
    InvalidCurrency = 'InvalidCurrency',
    PaymentOptionNotFound = 'PaymentOptionNotFound',
    InvalidInstallments = 'InvalidInstallments',
    ProductNotFound = 'ProductNotFound',
    DateNotFound = 'DateNotFound',
    DateNotAvailable = 'DateNotAvailable',
    ProductIsNotPublished = 'ProductIsNotPublished',
    PlanMaxBookingsReached = 'PlanMaxBookingsReached',
    ProductMaxBookingsReached = 'ProductMaxBookingsReached',
    DateMaxBookingsReached = 'DateMaxBookingsReached',
    DiscountCodeMaxBookingsReached = 'DiscountCodeMaxBookingsReached',
    InvalidPaymentData = 'InvalidPaymentData',
    InvalidPaymentAmount = 'InvalidPaymentAmount',
    MobilePaymentDataRequired = 'MobilePaymentDataRequired',
    InvalidBankCode = 'InvalidBankCode',
    InvalidPhoneNumber = 'InvalidPhoneNumber',
    InvalidNationalId = 'InvalidNationalId',
    PaymentVerificationError = 'PaymentVerificationError',
    InvalidPaymentProcessorType = 'InvalidPaymentProcessorType',
}

export enum ApiErrorCodes {
    UnauthorizedAccess = 'UnauthorizedAccess',
}

export enum ReferralsErrorCodes {
    ReferralCodeNotFound = 'ReferralCodeNotFound',
    ReferralCodeNotActive = 'ReferralCodeNotActive',
    ReferralCodeAlreadyUsed = 'ReferralCodeAlreadyUsed',
    ReferralCodeExpired = 'ReferralCodeExpired',
    ReferralCodeInvalid = 'ReferralCodeInvalid',
}

export enum ProductsErrorCodes {
    ProductNotFound = 'ProductNotFound',
    HostNotFound = 'HostNotFound',
    AliasAlreadyExists = 'AliasAlreadyExists',
    ProductIsNotReadyToBePublished = 'ProductIsNotReadyToBePublished',
    NotificationNotFound = 'NotificationNotFound',
    NotificationIsNotEditable = 'NotificationIsNotEditable',
    ProductDuplicationFailed = 'ProductDuplicationFailed',
    DateCannotBeDeleted = 'DateCannotBeDeleted',
    AvailabilityTypeRequiredToBePublished = 'AvailabilityTypeRequiredToBePublished',
    WeeklyAvailabilityRequiredToBePublished = 'WeeklyAvailabilityRequiredToBePublished',
    DurationRequiredToBePublished = 'DurationRequiredToBePublished',
    ProductInvalidType = 'ProductInvalidType',
    InvalidDateRange = 'InvalidDateRange',
    DatesRequired = 'DatesRequired',
    ProductResourceNotFound = 'ProductResourceNotFound',
    PlansAreRequiredToBePublished = 'PlansAreRequiredToBePublished',
    WeeklyAvailabilityDayEmpty = 'WeeklyAvailabilityDayEmpty',
    WeeklyAvailabilitySlotsOverlap = 'WeeklyAvailabilitySlotsOverlap',
    GuestUserNotFound = 'GuestUserNotFound',
    LastResourceIdIsRequired = 'LastResourceIdIsRequired',
    PaymentMethodsRequiredToBePublished = 'PaymentMethodsRequiredToBePublished',
    InvalidQuestionType = 'InvalidQuestionType',
    ProductNotFree = 'ProductNotFree',
    PlanNotFound = 'PlanNotFound',
}

export enum SettingsErrorCodes {
    PaymentOptionNotFound = 'PaymentOptionNotFound',
}
